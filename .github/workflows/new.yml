name: Task

on:
  workflow_dispatch:
    inputs:
    
      Team:
        type: choice
        description: Choose a Team
        options:
        - Byjus-Prod
        - Byjus-Dev
        - Byjus-Stagging
        - Dev_Roy
        - PR
    
      Task:
        type: choice
        description: Choose a Task
        options:
        - GET
        - UPDATE
        - CREATE
        
      Secret_Name:
      
      Key1:
      Value1:
      
      Key2:
      Value2:
      
      Key3:
      Value3:
       
      Description:
      
jobs:

  Task:
    runs-on: [ubuntu-latest]
    permissions:
        id-token: write
        contents: write
        
    steps:
      - name: Team
        uses: tspascoal/get-user-teams-membership@v1
        id: checkUserMember
        with:
            username: ${{ github.actor }}
            team: 'Byjus-Prod'
            GITHUB_TOKEN: ${{ secrets.PAT }} 
            
      - if: steps.checkUserMember.outputs.isTeamMember == 'true' && contains(github.event.inputs.Secret_Name, 'k12')
 

        name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ap-southeast-1
          role-skip-session-tagging: true

      - name: CREATE
        if: ${{ github.event.inputs.Task == 'CREATE' && success() ||failure() }}
        run:
            #!/bin/bash
            y='Rule'
            x=$(aws secretsmanager get-secret-value --secret-id ${{ github.event.inputs.Secret_Name}} | jq '.Rules[]') jq -nr --arg y "$y" --arg x "$x" '[$y, $x] | @csv' > sample.csv
            
            echo "${x}" | jq '.'
            #aws secretsmanager create-secret --name ${{ github.event.inputs.Secret_Name}} --secret-string '{"${{ github.event.inputs.Key1}}":"${{ github.event.inputs.Value1}}", "${{ github.event.inputs.Key2}}":"${{ github.event.inputs.Value2}}", "${{ github.event.inputs.Key3}}":"${{ github.event.inputs.Value3}}"}' 

      - name: GET    
        if: ${{ github.event.inputs.Task == 'GET' }}
        run: aws secretsmanager get-secret-value --secret-id ${{ github.event.inputs.Secret_Name}}

      - name: UPDATE   
        id: update
        if: ${{ github.event.inputs.Task == 'UPDATE' }}
        run:
            aws secretsmanager get-secret-value --secret-id ${{ github.event.inputs.Secret_Name}}

      - name: UPDATE_NOW   
        if: steps.update.outcome=='success'
        run:
            aws secretsmanager update-secret --secret-id ${{github.event.inputs.Secret_Name}} --secret-string '{"${{ github.event.inputs.Key1}}":"${{ github.event.inputs.Value1}}", "${{ github.event.inputs.Key2}}":"${{ github.event.inputs.Value2}}", "${{ github.event.inputs.Key3}}":"${{ github.event.inputs.Value3}}"}'
