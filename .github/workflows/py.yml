name: Task

on:
  workflow_dispatch:
    inputs:
    
      Team:
        type: choice
        description: Choose a Team
        options:
        - Byjus-Prod
        - Byjus-Dev
        - Byjus-Stagging
        - Dev_Roy
        - PR
    
      Task:
        type: choice
        description: Choose a Task
        options:
        - GET
        - UPDATE
        - CREATE
        
      Secret_Name:
      
      Key1:
      Value1:
      
      Key2:
      Value2:
      
      Key3:
      Value3:
       
      Description:
      
jobs:

  Task:
    runs-on: [ubuntu-latest]
    permissions:
        id-token: write
        contents: write
        
    steps:
      
      - name: Team
        uses: tspascoal/get-user-teams-membership@v1
        id: checkUserMember
        with:
            username: ${{ github.actor }}
            team: ${{github.event.inputs.Team}}
            GITHUB_TOKEN: ${{ secrets.PAT }} 
            
      - if: steps.checkUserMember.outputs.isTeamMember == 'true' && contains(github.event.inputs.Secret_Name, 'k12')
        name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ap-southeast-1
          role-skip-session-tagging: true
      
      - name: Install boto3
        shell: bash
        run:  pip3 install boto3
         
      - name: CREATE
        if: ${{ github.event.inputs.Task == 'CREATE' && success() ||failure() }}
        uses: jannekem/run-python-script-action@v1
        with: 
          script: |
            import boto3
            import json
            import os
            import botocore
            
            
            client = boto3.client('secretsmanager', aws_access_key_id= '${{ secrets.AWS_ACCESS_KEY_ID }}', aws_secret_access_key= '${{ secrets.AWS_SECRET_ACCESS_KEY }}', aws_session_token='${{ secrets.AWS_SESSION_TOKEN }}', region_name='ap-southeast-1')
            
            try:
                response = client.get_secret_value(SecretId = '${{ github.event.inputs.Secret_Name}}')
                str = response['SecretString']
                res = json.loads(str)
                if len('${{ github.event.inputs.Key1}}') != 0 and res.get('${{ github.event.inputs.Key1}}') == None:
                  res['${{ github.event.inputs.Key1}}'] = '${{ github.event.inputs.Value1}}'
                if len('${{ github.event.inputs.Key2}}') != 0 and res.get('${{ github.event.inputs.Key2}}') == None:
                  res['${{ github.event.inputs.Key2}}'] = '${{ github.event.inputs.Value2}}'
                if len('${{ github.event.inputs.Key3}}') != 0 and res.get('${{ github.event.inputs.Key3}}') == None:
                  res['${{ github.event.inputs.Key3}}'] = '${{ github.event.inputs.Value3}}'
                ans = json.dumps(res)
                response = client.update_secret(SecretId='${{ github.event.inputs.Secret_Name}}', SecretString=ans, Description='${{ github.event.inputs.Description}}')
            
            except :
                res={}
                if len('${{ github.event.inputs.Key1}}') != 0 and res.get('${{ github.event.inputs.Key1}}') == None:
                  res['${{ github.event.inputs.Key1}}'] = '${{ github.event.inputs.Value1}}'
                if len('${{ github.event.inputs.Key2}}') != 0 and res.get('${{ github.event.inputs.Key2}}') == None:
                  res['${{ github.event.inputs.Key2}}'] = '${{ github.event.inputs.Value2}}'
                if len('${{ github.event.inputs.Key3}}') != 0 and res.get('${{ github.event.inputs.Key3}}') == None:
                  res['${{ github.event.inputs.Key3}}'] = '${{ github.event.inputs.Value3}}'
                ans = json.dumps(res)
                response=client.create_secret(Name='${{ github.event.inputs.Secret_Name}}', SecretString=ans, Description='${{ github.event.inputs.Description}}')
                
          shell: python
         
      - name: GET    
        if: ${{ github.event.inputs.Task == 'GET' }}
        run: aws secretsmanager get-secret-value --secret-id ${{ github.event.inputs.Secret_Name}}

      - name: UPDATE   
        if: ${{ github.event.inputs.Task == 'UPDATE' && success() ||failure() }}
        uses: jannekem/run-python-script-action@v1
        with: 
          script: |
            import boto3
            import json
            import os
            import botocore
            
            
            client = boto3.client('secretsmanager', aws_access_key_id= '${{ secrets.AWS_ACCESS_KEY_ID }}', aws_secret_access_key= '${{ secrets.AWS_SECRET_ACCESS_KEY }}', aws_session_token='${{ secrets.AWS_SESSION_TOKEN }}', region_name='ap-southeast-1')
            
            try:
                response = client.get_secret_value(SecretId = '${{ github.event.inputs.Secret_Name}}')
                str = response['SecretString']
                res = json.loads(str)
                if len('${{ github.event.inputs.Key1}}') != 0:
                  res['${{ github.event.inputs.Key1}}'] = '${{ github.event.inputs.Value1}}'
                if len('${{ github.event.inputs.Key2}}') != 0:
                  res['${{ github.event.inputs.Key2}}'] = '${{ github.event.inputs.Value2}}'
                if len('${{ github.event.inputs.Key3}}') != 0:
                  res['${{ github.event.inputs.Key3}}'] = '${{ github.event.inputs.Value3}}'
                ans = json.dumps(res)
                response = client.update_secret(SecretId='${{ github.event.inputs.Secret_Name}}', SecretString=ans, Description='${{ github.event.inputs.Description}}')
            
            except :
                res={}
                if len('${{ github.event.inputs.Key1}}') != 0 and res.get('${{ github.event.inputs.Key1}}') == None:
                  res['${{ github.event.inputs.Key1}}'] = '${{ github.event.inputs.Value1}}'
                if len('${{ github.event.inputs.Key2}}') != 0 and res.get('${{ github.event.inputs.Key2}}') == None:
                  res['${{ github.event.inputs.Key2}}'] = '${{ github.event.inputs.Value2}}'
                if len('${{ github.event.inputs.Key3}}') != 0 and res.get('${{ github.event.inputs.Key3}}') == None:
                  res['${{ github.event.inputs.Key3}}'] = '${{ github.event.inputs.Value3}}'
                ans = json.dumps(res)
                response=client.create_secret(Name='${{ github.event.inputs.Secret_Name}}', SecretString=ans, Description='${{ github.event.inputs.Description}}')
                
          shell: python
